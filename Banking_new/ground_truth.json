[
  {
    "question": "List all transactions made on a specific date.",
    "intent": "list",
    "tables": ["transactions"],
    "columns": ["txn_date"],
    "value_mapping": {},
    "sql": "SELECT * FROM transactions WHERE txn_date = ?;",
    "sql_valid": true
  },
  {
    "question": "Show the names of all branches.",
    "intent": "list",
    "tables": ["branches"],
    "columns": ["branch_name"],
    "value_mapping": {},
    "sql": "SELECT branch_name FROM branches;",
    "sql_valid": true
  },
  {
    "question": "What is the total number of ATM withdrawals?",
    "intent": "count",
    "tables": ["atm_withdrawals"],
    "columns": [],
    "value_mapping": {},
    "sql": "SELECT COUNT(*) AS num_atm_withdrawals FROM atm_withdrawals;",
    "sql_valid": true
  },
  {
    "question": "List customers who have opened an account, received a credit card, and taken a loan—all within 3 months.",
    "intent": "list",
    "tables": ["customers", "accounts", "credit_cards", "loans"],
    "columns": ["open_date", "issue_date", "start_date"],
    "value_mapping": {},
    "sql": "SELECT c.customer_id, c.first_name, c.last_name FROM customers c JOIN accounts a ON c.customer_id = a.customer_id JOIN credit_cards cc ON c.customer_id = cc.customer_id JOIN loans l ON c.customer_id = l.customer_id WHERE ABS(DATE_PART('day', a.open_date::timestamp - cc.issue_date::timestamp)) <= 90 AND ABS(DATE_PART('day', a.open_date::timestamp - l.start_date::timestamp)) <= 90 AND ABS(DATE_PART('day', cc.issue_date::timestamp - l.start_date::timestamp)) <= 90;",
    "sql_valid": true
  },
  {
    "question": "Show each employee's branch and total number of accounts handled at their branch.",
    "intent": "list",
    "tables": ["employees", "branches", "accounts"],
    "columns": ["employee_id", "name", "branch_name", "account_id"],
    "value_mapping": {},
    "sql": "SELECT e.employee_id, e.name AS employee_name, b.branch_name, COUNT(a.account_id) AS num_accounts FROM employees e JOIN branches b ON e.branch_id = b.branch_id LEFT JOIN accounts a ON a.branch_id = b.branch_id GROUP BY e.employee_id, e.name, b.branch_name;",
    "sql_valid": true
  },
  {
    "question": "Find the average loan amount and total interest paid for each loan type.",
    "intent": "aggregate",
    "tables": ["loans", "loan_types", "loan_payments"],
    "columns": ["amount", "loan_type", "loan_id"],
    "value_mapping": {},
    "sql": "SELECT lt.loan_type, AVG(l.amount) AS avg_loan_amount, SUM(lp.amount) - SUM(l.amount) AS total_interest_paid FROM loans l JOIN loan_types lt ON l.loan_type_id = lt.loan_type_id JOIN loan_payments lp ON l.loan_id = lp.loan_id GROUP BY lt.loan_type;",
    "sql_valid": true
  },
  {
    "question": "Identify the branch with the highest number of customers.",
    "intent": "find",
    "tables": ["branches", "accounts"],
    "columns": ["branch_id", "branch_name", "customer_id"],
    "value_mapping": {},
    "sql": "SELECT b.branch_id, b.branch_name, COUNT(DISTINCT a.customer_id) AS num_customers FROM branches b JOIN accounts a ON b.branch_id = a.branch_id GROUP BY b.branch_id, b.branch_name ORDER BY num_customers DESC LIMIT 1;",
    "sql_valid": true
  },
  {
    "question": "What is the monthly trend of transactions for the past year?",
    "intent": "trend",
    "tables": ["transactions"],
    "columns": ["txn_date"],
    "value_mapping": {},
    "sql": "SELECT DATE_TRUNC('month', txn_date) AS month, COUNT(*) AS num_transactions FROM transactions WHERE txn_date >= (CURRENT_DATE - INTERVAL '1 year') GROUP BY month ORDER BY month;",
    "sql_valid": true
  },
  {
    "question": "Find customers who have more than 3 accounts and a credit card.",
    "intent": "find",
    "tables": ["customers", "accounts", "credit_cards"],
    "columns": ["customer_id", "account_id"],
    "value_mapping": {},
    "sql": "SELECT c.customer_id, c.first_name, c.last_name FROM customers c JOIN accounts a ON c.customer_id = a.customer_id JOIN credit_cards cc ON c.customer_id = cc.customer_id GROUP BY c.customer_id, c.first_name, c.last_name HAVING COUNT(DISTINCT a.account_id) > 3;",
    "sql_valid": true
  },
  {
    "question": "Show loans that are overdue and have had no payment in the last 60 days.",
    "intent": "find",
    "tables": ["loans", "loan_payments"],
    "columns": ["loan_id", "amount", "payment_date", "status"],
    "value_mapping": {"failed": "missed", "overdue": "late"},
    "sql": "SELECT l.loan_id, l.amount FROM loans l LEFT JOIN loan_payments lp ON l.loan_id = lp.loan_id WHERE l.loan_id NOT IN (SELECT loan_id FROM loan_payments WHERE payment_date >= (CURRENT_DATE - INTERVAL '60 days')) AND l.loan_id IN (SELECT loan_id FROM loan_payments WHERE status = 'late' OR status = 'missed');",
    "sql_valid": true
  },
  {
    "question": "Identify customers who have made the highest number of ATM withdrawals this year.",
    "intent": "find",
    "tables": ["atm_withdrawals", "accounts"],
    "columns": ["customer_id", "account_id", "withdrawal_date"],
    "value_mapping": {},
    "sql": "SELECT a.customer_id, COUNT(*) AS num_withdrawals FROM atm_withdrawals aw JOIN accounts a ON aw.account_id = a.account_id WHERE DATE_PART('year', aw.withdrawal_date) = DATE_PART('year', CURRENT_DATE) GROUP BY a.customer_id ORDER BY num_withdrawals DESC LIMIT 1;",
    "sql_valid": true
  },
  {
    "question": "Find the top 5 credit cards with the highest average transaction amount.",
    "intent": "find",
    "tables": ["card_transactions"],
    "columns": ["card_id", "amount"],
    "value_mapping": {},
    "sql": "SELECT ct.card_id, AVG(ct.amount) AS avg_amount FROM card_transactions ct GROUP BY ct.card_id ORDER BY avg_amount DESC LIMIT 5;",
    "sql_valid": true
  },
  {
    "question": "Which employees issued loans and also processed credit card applications?",
    "intent": "find",
    "tables": ["employees", "loans", "credit_cards"],
    "columns": ["employee_id", "name"],
    "value_mapping": {},
    "sql": "SELECT DISTINCT e.employee_id, e.name FROM employees e JOIN loans l ON e.employee_id = l.issued_by JOIN credit_cards cc ON e.employee_id = cc.processed_by;",
    "sql_valid": true
  },
  {
    "question": "Find customers who have made payments on more than one loan.",
    "intent": "find",
    "tables": ["loan_payments"],
    "columns": ["customer_id", "loan_id"],
    "value_mapping": {},
    "sql": "SELECT lp.customer_id FROM loan_payments lp GROUP BY lp.customer_id HAVING COUNT(DISTINCT lp.loan_id) > 1;",
    "sql_valid": true
  },
  {
    "question": "For each branch, show the number of employees, accounts, and total loan amount.",
    "intent": "aggregate",
    "tables": ["branches", "employees", "accounts", "loans"],
    "columns": ["branch_id", "branch_name", "employee_id", "account_id", "amount"],
    "value_mapping": {},
    "sql": "SELECT b.branch_id, b.branch_name, COUNT(DISTINCT e.employee_id) AS num_employees, COUNT(DISTINCT a.account_id) AS num_accounts, SUM(l.amount) AS total_loan_amount FROM branches b LEFT JOIN employees e ON b.branch_id = e.branch_id LEFT JOIN accounts a ON b.branch_id = a.branch_id LEFT JOIN loans l ON b.branch_id = l.account_id GROUP BY b.branch_id, b.branch_name;",
    "sql_valid": true
  },
  {
    "question": "List customers who had a failed loan payment followed by a successful one.",
    "intent": "find",
    "tables": ["loan_payments"],
    "columns": ["customer_id", "status", "payment_date"],
    "value_mapping": {"failed": "missed", "successful": "on-time"},
    "sql": "SELECT DISTINCT lp1.customer_id FROM loan_payments lp1 JOIN loan_payments lp2 ON lp1.customer_id = lp2.customer_id WHERE lp1.status = 'missed' AND lp2.status = 'on-time' AND lp2.payment_date > lp1.payment_date;",
    "sql_valid": true
  },
  {
    "question": "Which accounts have had more than 5 transactions in a single day?",
    "intent": "find",
    "tables": ["transactions"],
    "columns": ["account_id", "txn_date"],
    "value_mapping": {},
    "sql": "SELECT account_id, txn_date, COUNT(*) AS num_txns FROM transactions GROUP BY account_id, txn_date HAVING COUNT(*) > 5;",
    "sql_valid": true
  },
  {
    "question": "Find customers with both a loan and a credit card, and total loan amount — using a CTE.",
    "intent": "find",
    "tables": ["customers", "loans", "credit_cards"],
    "columns": ["customer_id", "first_name", "last_name", "amount"],
    "value_mapping": {},
    "sql": "WITH loan_customers AS (SELECT customer_id, SUM(amount) AS total_loan_amount FROM loans GROUP BY customer_id) SELECT c.customer_id, c.first_name, c.last_name, lc.total_loan_amount FROM customers c JOIN loan_customers lc ON c.customer_id = lc.customer_id JOIN credit_cards cc ON c.customer_id = cc.customer_id;",
    "sql_valid": true
  },
  {
    "question": "Find the number of loans per loan type.",
    "intent": "aggregate",
    "tables": ["loans", "loan_types"],
    "columns": ["loan_type"],
    "value_mapping": {},
    "sql": "SELECT lt.loan_type, COUNT(*) AS num_loans FROM loans l JOIN loan_types lt ON l.loan_type_id = lt.loan_type_id GROUP BY lt.loan_type;",
    "sql_valid": true
  },
  {
    "question": "List customers who have both an account and a loan.",
    "intent": "find",
    "tables": ["customers", "accounts", "loans"],
    "columns": ["customer_id"],
    "value_mapping": {},
    "sql": "SELECT DISTINCT c.customer_id, c.first_name, c.last_name FROM customers c JOIN accounts a ON c.customer_id = a.customer_id JOIN loans l ON c.customer_id = l.customer_id;",
    "sql_valid": true
  }
] 